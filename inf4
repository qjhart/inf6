#! /bin/bash

: <<=cut
=pod

=head1  NAME

inf4 - Communicate with a Fedora 4 server

=head1 USAGE

inf4 [-b|--base=I<base>] [-x|--prefix=I<prefix>] [-r|--no-rc] \
	[-n|--dry-run] [-d|--dir] [-p|--print] \
	I<cmd> [cmd-options]
	where <cmd> = config|patch|put|GET|HEAD|OPTIONS|url

=head1 OPTIONS

=over 4

=item B<-b|--base=I<INF4_BASE>>

set the Fedora4 URL

=item B<-x |--prefix=> I<prefix>>

 Add a new prefix for ttl, using prefix:url  format

=item B<-r|--no-rc>

Do not read from or write to rc file.

=item B<-n|--dry-run>

Show what you would do do not really do it

=item B<-d|--dir>

Set URL (wrt. INF4_BASE) for this operation only

=item B<-p|--print>

Adjust httpie --print= argument

=back

=cut

function main() {
  local opts=();

  declare -A -g G=([http_session]='inf4'
                   [path]="http://localhost:8666/fcrepo/rest"
                   [attr]=
                   [verbose]=0
                  );

  declare -A -g IGNORE;

  G[home]=$(util.home)

  # Read the configuration file
  config=${G[home]}/.fin/config.yml
  if [[ -f $config ]]; then
    eval $(parse_yaml "$config")
  fi

  _read_attributes
  _read_ignore

  # Main only gets parameters up to first non-variable
  while true; do
	  case $1 in
	    -*) opts+=($1); shift ;;
	    -- ) shift; break;;
	    *) break;
  	  esac
  done

  set -- "${opts[@]}" '--' "$@"

  if ! opts=$(getopt -o vh:np: --long verbose,base:,dry-run,print: -n 'inf4' -- "$@"); then
    echo "Bad Command Options." >&2 ;
    exit 1 ;
  fi

  eval set -- "$opts"

  while true; do
	  case $1 in
	    -n | --dry-run) G[noop]=1; shift ;;
	    -v | --verbose) let G[verbose]+=1; shift ;;
	    -p | --print) G[print]=$2; shift 2 ;;
	    -- ) shift; break;;
	    *) break;
	  esac
  done

  # Now Run the command
  cmd=$1
  shift;

  case $cmd in
    file.path | file.ignore)
      $cmd "$@";
      ;;
    item.fetch )
      $cmd "$@";
      ;;
    file.metadata | file.is_metadata | file.metadata_file ) # Metadata Commands
      $cmd "$@";
      ;;
    collection.create  | collection.delete | collection.upload )
      $cmd "$@";
      ;;
    util.home | util.config | login  ) # Utilities
	    $cmd "$@";
	    ;;
    put | patch)
	    $cmd "$@";
	    ;;
    http )	# http requests
	    _http "$@";
	    ;;

    *)
	    echo  "$cmd: cmd not found";
	    ;;
  esac
}

: <<=cut
=pod
=head2 metadata
=head3 USAGE
inf4 [inf4options] metadata --auto --mime-type=[mime-type] file
=head4
displays the metadata associated with any file.
=cut
function file.metadata() {
  local opts=`getopt -o axmn --long auto,extra:,mime:,no-file,position_regex:,fcr -n 'inf4 file.metadata' -- "$@"`
  if [ $? != 0 ] ; then err 1 "Bad inf4 file.metadata options."; fi
  eval set -- "$opts"

  local metadata
  local mime
  local extra
  declare -a types;
  local nofile
  local position_regex
  local fcr

  while true; do
    case $1 in
      --fcr)
        fcr=1;
        shift;
        ;;
      -n | --no-file)
        nofile=1;
        shift;
        ;;
      -a | --auto)
        auto=1;
        shift;
        ;;
      -m | --mime)
        mime=$2;
        shift 2;
        ;;
      --position_regex)
        position_regex=$2
        shift 2;
        ;;
      -x | --extra)
        extra=$2;
        shift 2;
        ;;
	  	--) shift; break;;
    	*) break;;
    esac
  done

  local basename=$(basename "$1");

  #  declare -a types=('ldp:NonRDFSource');
  if [[ -z $nofile ]]; then
    metadata=$(file.metadata_file --exists "$1" 2>/dev/null)
  fi
  if [[ -n $metadata ]]; then
    if [[ -f $1 && -n $fcr ]]; then
      cat $metadata | sed -e "s|<>|<../$(urlencode "$basename")>|"
    else
      cat $metadata
    fi
    exit 0
  fi

  if [[ -z $auto ]]; then
    exit 0
  fi

  if (file.ignore "$1"); then
    err 1 "$1 file.ignore"
  fi

  if (file.is_metadata "$1") ; then
    err 1 "$1 file.is_metadata"
  fi

  if [[ ! -d "$1" && ! -f "$1" ]]; then
    err 1 "$1 not found"
  fi

  if [[ -n $position_regex && $basename =~ $position_regex ]]; then
   extra+="schema:position ${BASH_REMATCH[1]};"
  fi;

  if [[ -z $mime ]]; then
    if [[ $1 =~ .ttl$ ]] ; then
      mime='text/turtle'
      delcare -p $types
    elif [[ -n $1 ]]; then
		  mime=$(file --mime-type -b "$1");
	  fi;
  fi

  if [[ $mime =~ ^image/.* ]]; then
    types+=('schema:ImageObject','schema:MediaObject','schema:CreativeWork');
  else
    types+=('schema:CreativeWork');
  fi

  local typestr=$(printf "%s," ${types[@]})
  if [[ -z $extra && ${#types[@]} > 0 ]]; then
      read -r -d '' metadata <<AUTO;
@prefix ldp:    <http://www.w3.org/ns/ldp#> .
@prefix schema: <http://schema.org/> .
@prefix ebucore: <http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#> .
<> a ${typestr%,};
  ebucore:filename "$basename";
  ebucore:hasMimeType "$mime" .
AUTO
    else
      read -r -d '' metadata <<AUTO;
@prefix ldp:    <http://www.w3.org/ns/ldp#> .
@prefix schema: <http://schema.org/> .
@prefix ebucore: <http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#> .
<> a ${typestr%,};
  ${extra}
  ebucore:filename "$basename" ;
  ebucore:hasMimeType "$mime" .
AUTO
  fi

  if [[ -f $1 && -n $fcr ]]; then
    echo "$metadata"  | sed -e "s|<>|<../$(urlencode "$basename")>|"
  else
    echo $metadata
  fi
}

function file.ignore() {
  local path=$(realpath -m "$1")
  local home=${G[home]}
  for i in "${!IGNORE[@]}"; do
    if [[ $path = $home/$i ]]; then
      log -vvv file.ignore "$1=$i"
      exec true
    fi
  done
  # have to check dirs as well
  path=$(dirname "$path")
  while [[ $path > $home && $path != '/' ]]; do
    for i in "${!IGNORE[@]}"; do
      if [[ $1 = $i ]]; then
        log -vvv IGNORE "$1='$i'"
        exec true
      fi
    done
    path=$(dirname "$path")
  done
  exec false
}

: <<=cut
=pod
=head2 file.is_metadata
=head3 USAGE
inf4 [inf4options] file.is_metadata file
=head4

Returns true if the passed file is a metadata file, false if not. The file
undergoes two tests. First it is validated as a metadata file type, based on the
metadata file patterns (file.metadata_file in YML file). If the file matches the pattern, then the
associated file is checked for existance. If the file exists, then we assume the
file is a metadata file associated with the appropriate file or directory.
Can be used like C<if (inf4 file.is_metadata foo.png.ttl); then echo metadata; fi>.

=cut
function file.is_metadata() {
  local file_pattern=${G[metadata_is_metadata]}
#  log "$1 =~ $file_pattern"
  if [[ $1 =~ ${file_pattern} && ( -f ${BASH_REMATCH[1]} || -d ${BASH_REMATCH[1]} ) ]]; then
    exit 0;
  else
    exit 1;
  fi
}

function file.metadata_file() {
    local opts=`getopt -o x --long exists -n 'file.metadata_file' -- "$@"`
    if [[ $? != 0 ]] ; then return ; fi

    eval set -- "$opts"

    local mf=FILE.ttl;
    local ttl;
    local exists=;

    while true; do
	    case $1 in
	      -x | --exists) exists=1;  shift;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    # First check if it's a metadata file then exit 1
    if [[ ! -d $1 && ! -f $1 ]]; then
      err 1 "$1 not found"
    fi

    if (file.ignore "$1"); then
      err 1 "$1 file.ignore"
    fi
    if (file.is_metadata "$1") ; then
      err 1 "$1 file.is_metadata"
    fi

    if [[ -f $1 || -d $1 ]] ; then
      local fq=$(realpath "$1")
      if [[ $fq == ${G[home]} ]]; then  # Home directory is treated different
        ttl=$fq/${G[collection]}.ttl
      else
        ttl=${mf//FILE/$1}
      fi
      if [[ -n $exists && ! -f $ttl ]]; then
        err 1 "$ttl not found"
      fi
    fi;
    echo $ttl
    exit 0;
}

: <<=cut
=pod
=head2 file.path
=head3 USAGE
inf4 file.path --relative <filepath>
=head4
Returns the LDP path location for the file.  The default is to simply remove
the suffix from the basename of a file.  With full however, the suffix is retained.
=cut
function file.path() {
  local opts=`getopt -o r --long relative -n 'file.path' -- "$@"`
  if [[ $? != 0 ]] ; then return ; fi

  eval set -- "$opts"

  local full=1
  local path

  while true; do
	  case $1 in
	    -r | --relative) full=;  shift;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  if [[ -z $1 ]]; then
    if [[ -n $full ]]; then
      path=${G[source_host]}${G[source_base]}/collection/${G[source_collection]}
    else
      path=.
    fi
  else
    if (file.ignore "$1"); then
      err 1 "$1 file.ignore"
    elif (file.is_metadata "$1"); then
      err 1 "$1 file.is_metadata"
    fi

    path=$(realpath -m --relative-to="${G[home]}" "$1")
    if [[ -n $full ]]; then
      path=${G[source_host]}${G[source_base]}/collection/$path
    fi
  fi
  echo $path
}


: <<=cut
=pod
=head2 fetch
=head3 USAGE
inf4 item fetch --etag --metadata --binary <item>
=head4
Add a file or directory to an LDP.
=cut
function item.fetch() {
  local opts=`getopt -o meb --long metadata,binary,etag -n 'inf4 item.fetch' -- "$@"`
  if [ $? != 0 ] ; then err 1 "Bad inf4 item.fetch options."; fi
  eval set -- "$opts"

  local metadata=
  local etag=
  local binary=
  local check=

  while true; do
    case $1 in
      -m | --metadata ) # Used for mime-types
        metadata=1;
        shift;;
      -e | --etag)
        etag=1;
        shift;
        ;;
	    -b | --binary)
        binary=;
        shift;
		    ;;
	  	--) shift; break;;
    	*) break;;
    esac
  done
  local head
  local file=$1
  local metadata_file=

  local path=$(file.path "$file")
  head=$(_http --print=h HEAD $(file.path "$path"))
  eval $(parse_headers "$head")

#  if [[ -n $etag ]]; then
#    if [[ -n $check ]]; then
  if [[ -f $file ]]; then
    echo ${headers[etag]} >> $file.ldp.etag
    # Now get metadata header
    head=$(_http --print=h HEAD "$(file.path $path)/fcr:metadata")
    eval $(parse_headers "$head")
    echo ${headers[etag]} >> $file.ldp.ttl.etag
    _http GET "$(file.path "$path")/fcr:metadata" prefer:return=minimal Accept:text/turtle > $file.ldp.ttl
  elif [[ -d $file ]]; then
    echo ${headers[etag]} >> $file/ldp.etag
    head=$(_http --print=h HEAD "$(file.path "$path")/fcr:metadata")
    eval $(parse_headers "$head")
    echo ${headers[etag]} >> $file/ldp.ttl.etag
    _http GET "$(file.path "$path")/fcr:metadata" prefer:return=minimal Accept:text/turtle > $file/ldp.ttl
  else
    err 1 "item.fetch $file not actionable"
  fi

}

: <<=cut
=pod
=head2 put
=head3 USAGE
inf4 [inf4options] put --auto --mime-type=I<mime> --extra=I<extra> file
=head4
Add a file or directory to an LDP.
=cut
function put() {
  local opts=()
  if ! opts=$(getopt -o atM:u --long auto:,type:,no-metadata,mime-type:,update -n 'inf4 put' -- "$@") ; then
    err 1 "inf4 put: bad options";
  fi

  eval set -- "$opts"

  local metadata=
  local no_metadata=
  local mime=
  local name=
  declare -A types;
  local update=

  while true; do
    case $1 in
      -a | --auto )
        auto=--auto;
        shift;
        ;;
	    -M | --no-metadata )
        no_metadata=1;
        shift;
		    ;;
	    -m | --mime-type )
        mime=$2; shift 2;;
      -t | --type)
        types+=($2);
        shift 2;;
      -u | --update )
        update=1;
        shift;;
	  	--) shift; break;;
    	*) break;;
    esac
  done

  local file=$1
  local fp=$(file.path "$file")

  if [[ -z $update && -f $file ]]; then
    if [[ -z $mime ]]; then
      if [[ $file =~ .ttl$ ]] ; then
        mime=text/turtle
        _http PUT $fp prefer:return=minimal Content-Type:$mime @$file
      else
		    mime=$(file --mime-type -b "$file");
	      _http PUT $fp Content-Type:$mime @$file
	    fi;
    fi;
  elif [[ -z $update && -d $file ]] ; then
    _http PUT $fp
  fi

  # Now add metadata
  if [[ -z $no_metadata ]]; then
      if [[ -f $file ]]; then
        metadata=$(file.metadata --fcr $auto "$file" )
        if [[ -n $metadata ]]; then
          _http PUT $fp/fcr:metadata prefer:return=minimal Content-Type:text/turtle <<<$metadata
        fi
      elif [[ -d $file ]]; then
        metadata=$(file.metadata $auto "$file" )
        if [[ -n $metadata ]]; then
          _http PUT $fp prefer:return=minimal Content-Type:text/turtle <<<$metadata
        fi
      fi
  fi
}


function collection.create() {
  local opts=`getopt -o d --long delete -n 'inf4 collection.create' -- "$@"`
  if [[ $? != 0 ]] ; then return ; fi
  eval set -- "$opts"

  local delete=

  while true; do
	  case $1 in
      -d | --delete ) delete=--delete; shift;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  if [[ -n $delete ]]; then
    collection.delete
  fi

  _http PUT "$(file.path)"
  collection.upload .fin
  _http PUT "$(file.path)/fcr:metadata" prefer:return=minimal Content-Type:text/turtle @${G[home]}/${G[collection]}.ttl
}

function collection.delete() {
  _http DELETE "$(file.path)"
  _http DELETE "$(file.path)/fcr:tombstone"
}

: <<=cut
=pod
=head2 collection.upload
=head3 USAGE
inf4 [inf4options] collection.upload --auto <files and directories>
=head4
Add items to the collection. This will add all files from an item into the system.
=cut
function collection.upload() {
  local opts=`getopt -o acd --long auto,delete -n 'inf4 collection.upload' -- "$@"`
  if [[ $? != 0 ]] ; then return ; fi
  eval set -- "$opts"

  local metadata;
  local d;
  local f;
  local i;
  declare -a types;
  local auto=
  local delete=
  declare -a files

    while true; do
	    case $1 in
        -a | --auto ) auto=--auto; shift;;
        -d | --delete ) delete=--delete; shift;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    if [[ -n $delete ]]; then
      collection.delete
    fi

    local fq
    for i in $@; do
      if ! (file.ignore "$i") ; then
        if ! (file.is_metadata "$i"); then
          if [[ -f $i ]]; then
            files+=($i);
          elif [[ -d $i ]]; then
            i=${i%/}
            fq=$(realpath "$i");
            if [[ $fq == ${G[home]} ]]; then  # Home directory is treated different
              put --no-metadata $i
              #collection.upload .fin $i/*;
              collection.upload $i/*;
              put --update $i
            else
              put --no-metadata $i
              collection.upload $i/*;
              put --update $auto $i
            fi
          else
            log "file.unknown $i -- skipping"
          fi
        fi
      fi
    done
    local f
    # Now add each file
    for f in ${files[@]}; do
      put $auto $f
    done
}

urlencode() {
    # urlencode <string>
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

: <<=cut
=pod
=head2 login
=head3 USAGE
inf4 [inf4options] login --headless
=head4
Allows users to login to the system.  The

=cut
function login() {
  local opts
  local token

  local prompt

  read -r -d '' prompt <<PROMPT;
Visit this URL on any device to log in, then paste token below.
${G[source_host]}/auth/cas/login?cliRedirectUrl=$(urlencode ${G[host]}/auth/login-shell)&provideJwt=true&force=true

Token:
PROMPT

  read -p "$prompt" -r token;

   http --session=${G[http_session]} ${G[source_host]}${G[source_base]} "Authorization:Bearer $token"
}

: <<=cut
=pod
=head2 util.config
=head3 USAGE
inf4 [inf4options] util.config
=head4
displays the configuration as an associative array
=cut
function util.config() {
  declare -p G
#  declare -p IGNORE
}

function util.home() {
  local pwd=${PWD}
  local home=${HOME}
  local inf4=''
  while [[ $pwd != $home && $pwd != '/' ]]; do
    if [[ -d ${pwd}/.fin ]]; then
      inf4=$pwd;
      break;
    fi
    pwd=$(dirname "$pwd");
  done
  if [[ -z $inf4 ]]; then
    echo "fatal: Not a inf4 repository (or any of the parent directories): .fin" 1>&2
    exit 128;
  fi;
  echo $inf4;
}

function _http () {
  local stdinp=
  local http="http --session-read-only=${G[http_session]}"
  if [[ $1 == '-n' || -n ${G[noop]} ]]; then
    [[ $1 == '-n' ]] && shift
    if [[ ! -t 0 ]]; then
      IFS='' read -r -d '' stdinp;
      log "$http $@ <<<'$stdinp'"
    else
      log "$http $@"
    fi
  else
    $http "$@"
  fi
}

function _config_file() {
  local pwd=${PWD}/
  local home=${G[home]}
  local file;
  until [[ $pwd < $home ]]; do
    if [[ -f ${pwd}$1 ]]; then
      file=${pwd}$1;
      break;
    fi
    pwd=$(dirname "$pwd");
  done
  echo $file
}

function _read_attributes() {
  local attr=$(_config_file .finattributes)
  local pat
  local val
  if [[ -n $attr ]]; then
    while read -r pat val; do
      if [[ -n $pat && $pat != \#* ]]; then
        G[attr_$pat]="$val"
      fi
    done < $attr
  fi
}

function _read_ignore() {
  local attr
  local pat
  local dir
  for attr in $(_config_file .finignore); do
    dir=$(dirname "$attr");
    local a=${attr#${G[home]}/}
    if [[ -n $attr ]]; then
      while IFS='' read  pat; do
        if [[ -n $pat && $pat != \#* ]]; then
          pat=$(realpath "$dir/./$pat")
          pat=${pat#${G[home]}/}
          IGNORE[$pat]=$a
        fi
      done < $attr
    fi
  done
}

function parse_headers() {
shopt -s extglob # Required to trim whitespace; see below
declare -A headers
while IFS=':' read key value; do
    # trim whitespace in "value"
    value=${value##+([[:space:]])}; value=${value%%+([[:space:]])}
    headers[$key]=$value;
done <<< "$1"
declare -p headers
}

function parse_yaml() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("G[%s%s]=\"%s\"\n", vn, $2, $3);
      }
   }'
}

: <<=cut
=pod:

=head1 ADDITIONAL FUNCTIONS

There are also functions C<log> and C<err>.  That are only really expected to be
used inside the application.

=cut

# program at end of file. search #MAIN
function log() {
  local opts;
  if ! opts=$(getopt -o v --long verbose -n 'harvest log' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ;
	fi

  eval set -- "$opts"

  local log_verbose=0

  while true; do
	  case $1 in
	    -v | --verbose) let log_verbose=$log_verbose+1;  shift;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done
	(( ${G[verbose]} >= $log_verbose )) && (echo $@)
}

function err() {
  local n=1;
  n=$1
  shift
  (>&2 echo err: $@)
  exit $n;
}


: <<=cut
=pod
=head1 AUTHOR
Quinn Hart <qjhart@ucdavis.edu>
=cut

#MAIN
main "$@"
exit 0;

# Not added yet
function patchin() {
    OPTS=`getopt -o c:i:d: --long collection:,path:,data: -n 'inf4 patchin' -- "$@"`
    # Exit if
    if [[ $? != 0 ]] ; then return ; fi

    local col=
    local path
    local data

    eval set -- "$OPTS"

    while true; do
	    case $1 in
	      -c | --collection) col=$2;  shift 2;;
	      -p | --path) path=$2;  shift 2;;
	      -d | --data) data=$2;  shift 2;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    if [[ -n $col ]]; then
      path=/collection/$col/$path;
    fi
    echo fin http patch --data-string "$data" -P h "$path/fcr:metadata"
}
